#!/usr/bin/env bash
# #!/bin/bash
# /bin/zsh

export PATH="/usr/local/bin:/usr/bin:$PATH"

# 自动设置全局代理
# https://gist.github.com/rmcdongit/f66ff91e0dad78d4d6346a75ded4b751
# https://gist.github.com/dvessel/2b6ad97b2da16d445671b39618221aab
# https://community.jamf.com/t5/jamf-pro/scripting-quot-exclude-simple-hostnames-quot/m-p/64445
# open /System/Library/PreferencePanes/Network.prefPane  # 打开网络偏好设置面板
# open "x-apple.systempreferences:com.apple.Network-Settings.extension?Proxies"
# networksetup
# networksetup -setproxyautodiscovery Wi-Fi on  # 打开 WiFi 里 自动发现代理 开关
# networksetup -getsecurewebproxy Wi-Fi/Ethernet  # 获取 WiFi 或 以太网 代理配置
# networksetup -getproxybypassdomains Wi-Fi  # 忽略这些主机与域的代理设置
# networksetup -listallnetworkservices  # 获取所有网络服务

# 设置别名
# alias pset='networksetup -setwebproxy Wi-Fi 127.0.0.1 7890 && networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 7890 && networksetup -setsocksfirewallproxy Wi-Fi 127.0.0.1 7890 && networksetup -setproxybypassdomains Wi-Fi 192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,127.0.0.1,localhost,*.local,timestamp.apple.com,sequoia.apple.com,seed-sequoia.siri.apple.com'
# alias psystem='networksetup -setwebproxystate Wi-Fi on && networksetup -setsecurewebproxystate Wi-Fi on && networksetup -setsocksfirewallproxystate Wi-Fi on'
# alias upsystem='networksetup -setwebproxystate Wi-Fi off && networksetup -setsecurewebproxystate Wi-Fi off && networksetup -setsocksfirewallproxystate Wi-Fi off'

current_path=$(/bin/pwd)
logFile="$current_path/z_log.txt"

log_command() {
  local command="$1"
  local log_file="$logFile"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo -e "\n[$timestamp] 执行命令: $command\n" >> "$log_file"
  if eval "$command" 2>&1 | tee -a "$log_file"; then
    echo -e "\n[$timestamp] 执行成功\n" >> "$log_file"
  else
    echo -e "\n[$timestamp] 执行失败\n" >> "$log_file"
  fi
  # 添加空白
  printf '\n%.0s' {1..10} >> $log_file
}
# log_command "ls -l"
# log_command "echo 'Hello'"

hl_input=""
hl_output='{"code": "200"}'

dealMsg() {
  local noteFile="$HOME/inner/__note.txt"
  local clashFile="$HOME/.config/clash/ss.yaml"
  local osa="$current_path/nm_ss.scpt"
  local bypassdomains="127.0.0.1,localhost,gateway.icloud.com,gateway.icloud.com.cn,\
  10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,172.16.0.0/12,192.168.0.0/16,*.local,\
  timestamp.apple.com,sequoia.apple.com,seed-sequoia.siri.apple.com"
  hl_input=${hl_input/#*'{'/'{'}
  # hl_input=${hl_input%'"}'}
  msg_command=$(echo "$hl_input" | yq '.message')
  msg_content=$(echo "$hl_input" | yq '.content')
  echo $msg_command >> $logFile

  # 使用 2>&1 将标准错误输出到文件里
  # result=$(w2 "status" 2>&1)
  # echo "Received message: $result" | tee -a $logFile
  # w2 status >> $logFile

  # ls >> $logFile
  # echo $1":arg1" >> $logFile
  # echo $HOME >> $logFile
  # echo `which echo` >> $logFile
  # echo `which w2` >> $logFile

  # 注意，如果 echo 的内容不被处理、会导致 Error when communicating with the native messaging host.
  # https://stackoverflow.com/a/51551525/2190503

  if [[ "$msg_command" == "top" ]]; then
    open -a "Google Chrome" "http://localhost:9999?disableLeaveAlert=true"
    log_command "echo '进程信息:' && ps -ef | grep ttyd"
  elif [[ "$msg_command" == "top-kill" ]]; then
    clipboard_content=$(pbpaste)
    log_command "kill $clipboard_content"
  elif [[ "$msg_command" == "setNote" ]]; then
    echo "$msg_content" > $noteFile
  elif [[ "$msg_command" == "getNote" ]]; then
    noteFile_cont=$(cat $noteFile)
    hl_output='{"code": "200", "content": '$noteFile_cont'}'
  elif [[ "$msg_command" == "addRule" ]]; then
    if [[ $msg_content =~ ^www\. ]]; then
      msg_content=${msg_content#www.}
    fi
    new_str=DOMAIN-SUFFIX,"${msg_content}",Proxy
    # 豆包+通义千问: 使用 yq 判断 如果rules 里不存在 aaa，则前置插入aaa
    rules_value=$(yq '.rules' $clashFile)
    if [[ "$rules_value" != *$new_str* ]]; then
      echo $new_str >> $logFile
      yq e '.rules |= [ "'"$new_str"'" ] +.' $clashFile -i
      osascript $osa
    fi
  elif [[ "$msg_command" == "clash" ]]; then
  # bypassdomains 和 clash rule 哪个优先？
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsocksfirewallproxy Wi-Fi 127.0.0.1 7890
  networksetup -setproxybypassdomains Wi-Fi "$bypassdomains"
  # networksetup -setproxybypassdomains Wi-Fi *.local 169.254/16 baidu.com
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi on
  elif [[ "$msg_command" == "comp" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi on
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "whistle" ]]; then
  # sleep 5
  log_command "w2 restart"
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setsocksfirewallproxy Wi-Fi Empty
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi off
  networksetup -setproxybypassdomains Wi-Fi Empty
  elif [[ "$msg_command" == "no" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "openMacConfig" ]]; then
  open "x-apple.systempreferences:com.apple.Network-Settings.extension?Proxies"
  fi
  echo $hl_output
}

# 来自 https://stackoverflow.com/a/24777120/2190503
# Loop forever, to deal with chrome.runtime.connectNative
while IFS= read -r -n1 c; do
    # Read the first message
    # Assuming that the message ALWAYS ends with a },
    # with no }s in the string. Adopt this piece of code if needed.
    hl_input="$hl_input$c"
    if [ "$c" != '}' ] ; then
        continue
    fi

    # dealMsg aa
    dealMsg

    # Calculate the byte size of the string.
    # NOTE: This assumes that byte length is identical to the string length!
    # Do not use multibyte (unicode) characters, escape them instead, e.g.
    # message='"Some unicode character:\u1234"'
    messagelen=${#hl_output}

    # Convert to an integer in native byte order.
    # If you see an error message in Chrome's stdout with
    # "Native Messaging host tried sending a message that is ... bytes long.",
    # then just swap the order, i.e. messagelen1 <-> messagelen4 and
    # messagelen2 <-> messagelen3
    messagelen1=$(( ($messagelen      ) & 0xFF ))
    messagelen2=$(( ($messagelen >>  8) & 0xFF ))
    messagelen3=$(( ($messagelen >> 16) & 0xFF ))
    messagelen4=$(( ($messagelen >> 24) & 0xFF ))

    # Print the message byte length followed by the actual message.
    printf "$(printf '\\x%x\\x%x\\x%x\\x%x' \
        $messagelen1 $messagelen2 $messagelen3 $messagelen4)%s" "$hl_output"
done
